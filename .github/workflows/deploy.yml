name: Deploy Terraform and Docker

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: Provision Infrastructure with Terraform
    runs-on: ubuntu-latest

    steps:
      # 1. Fazer checkout do c√≥digo
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Configurar o AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Instalar Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # 4. Inicializar Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: infra

      # 5. Importar Recursos Existentes
      - name: Import Existing Resources
        shell: bash
        working-directory: infra
        run: |
          terraform state list aws_vpc.my_vpc || terraform import aws_vpc.my_vpc vpc-06c6164a5a1087a81
          terraform state list aws_subnet.my_subnets[0] || terraform import aws_subnet.my_subnets[0] subnet-074943a2a111a73dd
          terraform state list aws_subnet.my_subnets[1] || terraform import aws_subnet.my_subnets[1] subnet-07c29e0c6c2c9e9c8
          terraform state list aws_security_group.my_sg || terraform import aws_security_group.my_sg sg-028007d516acb3e39
          terraform state list aws_ecs_cluster.my_cluster || terraform import aws_ecs_cluster.my_cluster my-ecs-cluster
          terraform state list aws_ecr_repository.my_api || terraform import aws_ecr_repository.my_api my-api-repository
          terraform state list aws_iam_role.ecs_task_execution_role || terraform import aws_iam_role.ecs_task_execution_role ecsTaskExecutionRole
          terraform state list aws_cloudwatch_log_group.ecs_logs || terraform import aws_cloudwatch_log_group.ecs_logs /ecs/my-container-logs
          terraform state list aws_lb.ecs_alb || terraform import aws_lb.ecs_alb arn:aws:elasticloadbalancing:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:loadbalancer/app/my-alb/50dc6c495c0c9188
          terraform state list aws_lb_target_group.ecs_tg || terraform import aws_lb_target_group.ecs_tg arn:aws:elasticloadbalancing:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:targetgroup/my-target-group/73e2d6bc24d8a067

      # 6. Planejar Infraestrutura
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: infra

      # 7. Aplicar Infraestrutura
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: infra

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform # Garante que o Terraform finalize antes do Docker

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: List Files
        run: ls -R

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-api-repository:latest -f api-test/Dockerfile api-test/

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-api-repository:latest